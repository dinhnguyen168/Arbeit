<?php

namespace app\models\core;

use app\behaviors\upload\AttachmentsBehaviors;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\web\UploadedFile;

/**
 * This is the model class for table "message_of_the_day".
 *
 * @property int $id
 * @property string $message
 * @property string $date
 * @property int $created_by
 * @property int $updated_by
 * @property int $created_at
 * @property int $updated_at
 *
 * @property ImageOfTheDay[] $imageOfTheDays
 * @property User $createdBy
 * @property User $updatedBy
 */
class MessageOfTheDay extends \yii\db\ActiveRecord
{
    public $images;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'message_of_the_day';
    }

    public function behaviors()
    {
        return array_merge(parent::behaviors(),[
            TimestampBehavior::class,
            BlameableBehavior::class
        ]);
    }

    public function fields()
    {
        return [
            'id',
            'message',
            'date',
            'images' => function ($model) {
                return $model->imageOfTheDays;
            }
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['message', 'date'], 'required'],
            [['message'], 'string'],
            [['date'], 'date', 'format' => 'yyyy-MM-dd'],
            [['images'], 'validateImages', 'skipOnEmpty' => false],
            [['created_by', 'updated_by', 'created_at', 'updated_at'], 'integer'],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['updated_by' => 'id']],
        ];
    }

    public function validateImages ($attribute, $params, $validator) {
        if (!isset($this->$attribute) || !is_array($this->$attribute) || (is_array($this->$attribute) && count($this->$attribute) < 1)) {
            $this->addError($attribute, 'At least one image must be attached to the message.');
        } else {
            foreach ($this->images as $image) {
                if (!isset($image['image_id'])) {
                    $this->addError($attribute, 'Images has a non valid image id.');
                }
                if (!isset($image['caption'])) {
                    $this->addError($attribute, 'Images caption is required.');
                }
            }
        }
    }

    public function beforeSave($insert)
    {
        if (count($this->images) == 1) {
            // remove default image
            if ($this->images[0]['image_id'] == 0) {
                $this->images = [];
            }
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        if (!$insert) {
            ImageOfTheDay::deleteAll(["message_id" => $this->id]);
        }
        foreach ($this->images as $image) {
            $imageModel = new ImageOfTheDay($image);
            $imageModel->message_id = $this->id;
            $imageModel->save();
        }
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'message' => 'Message',
            'date' => 'Date',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImageOfTheDays()
    {
        return $this->hasMany(ImageOfTheDay::className(), ['message_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'updated_by']);
    }
}
