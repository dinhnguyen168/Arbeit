<?php

namespace app\models\base;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use \app\models\CurationSectionSplit;

/**
* This is the search base model class for model "CurationSectionSplit".
* DO NOT EDIT THIS FILE.
*/
abstract class BaseCurationSectionSplitSearch extends CurationSectionSplit
{
    use \app\models\core\SearchModelTrait;

    public $program_id;
    public $expedition_id;
    public $site_id;
    public $hole_id;
    public $core_id;
    public $mcd_top_depth;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'section_id', 'type', 'origin_split_id', 'combined_id', 'igsn', 'still_exists', 'sampleable', 'percent', 'curator', 'corebox_name', 'corebox_id', 'corebox_slot', 'corebox_position', 'comment', 'comment_storage', 'comment_identifier', 'mcd_top_depth', 'measurement_exists', 'weight', 'crate_name', 'storage_combined_id', 'program_id', 'expedition_id', 'site_id', 'hole_id', 'core_id'],'safe'],
        ];
    }

    public function getExtraSortAttributes () {
        return [
            'mcd_top_depth' => [
                'asc' => ['core_section.mcd_top_depth' => SORT_ASC],
                'desc' => ['core_section.mcd_top_depth' => SORT_DESC],
            ],
        ];
    }

    protected function addQueryColumns($query) {
        $this->addQueryColumn($query, 'id', 'number');
        $this->addQueryColumn($query, 'section_id', 'number');
        $this->addQueryColumn($query, 'type', 'string');
        $this->addQueryColumn($query, 'origin_split_id', 'number');
        $this->addQueryColumn($query, 'combined_id', 'string');
        $this->addQueryColumn($query, 'igsn', 'string');
        $this->addQueryColumn($query, 'still_exists', 'boolean');
        $this->addQueryColumn($query, 'sampleable', 'boolean');
        $this->addQueryColumn($query, 'percent', 'number');
        $this->addQueryColumn($query, 'curator', 'string');
        $this->addQueryColumn($query, 'corebox_id', 'number');
        $this->addQueryColumn($query, 'corebox_slot', 'number');
        $this->addQueryColumn($query, 'corebox_position', 'string');
        $this->addQueryColumn($query, 'comment', 'string');
        $this->addQueryColumn($query, 'comment_storage', 'string');
        $this->addQueryColumn($query, 'comment_identifier', 'string');
        $this->addQueryColumn($query, 'measurement_exists', 'boolean');
        $this->addQueryColumn($query, 'weight', 'number');
        $this->addQueryColumn($query, 'crate_name', 'string');
        $this->addQueryColumn($query, 'storage_combined_id', 'string');
        $this->addQueryColumn($query, 'corebox_name', 'string');
        $this->addQueryPseudoColumn($query, 'mcd_top_depth', 'pseudo', 'core_section', 'mcd_top_depth', array ( 0 =>  array ( 'table' => 'core_section', 'on' => 'curation_section_split.section_id = core_section.id', ), ));
    }

    protected function addQuerySearchAttributes($query) {
        $joins = [];
        $this->addQuerySearchAttribute($query, 'program_id', 'project_expedition', 'project_site.expedition_id', 'project_expedition.id', $joins);
        $this->addQuerySearchAttribute($query, 'expedition_id', 'project_site', 'project_hole.site_id', 'project_site.id', $joins);
        $this->addQuerySearchAttribute($query, 'site_id', 'project_hole', 'core_core.hole_id', 'project_hole.id', $joins);
        $this->addQuerySearchAttribute($query, 'hole_id', 'core_core', 'core_section.core_id', 'core_core.id', $joins);
        $this->addQuerySearchAttribute($query, 'core_id', 'core_section', 'curation_section_split.section_id', 'core_section.id', $joins);
        $this->createSearchJoins($query, $joins);
    }

}