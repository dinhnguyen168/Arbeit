<?php

namespace app\models\base;

use Yii;
use app\models\ProjectExpedition;
use app\models\ProjectProgram;
use app\models\ArchiveFile;

/**
 * This is the generated model base class for table "geology_litho_units".
 * DO NOT EDIT THIS CLASS MANUALLY!
 *
 * @property int $id ID
 * @property int|null $expedition_id Expedition
 * @property string|null $lithological_unit Lithological Unit
 * @property string|null $lithological_unit_name Lithological Unit Name
 * @property string|null $description Description
 * @property string|null $combined_id System Combined ID
 *
 * @property ProjectExpedition $expedition
 * @property ProjectExpedition $parent
 * @property ProjectProgram $program
 */
abstract class BaseGeologyLithoUnits extends \app\models\core\Base
{
    /* [i.e columnName => [displayColumn, relationName],[..]] */
    const MANY_TO_MANY_COLUMNS = [];
    /* [[i.e columnName => displayColumn],[..]] */
    const ONE_TO_MANY_COLUMNS = [];

    const MODULE = 'Geology';
    const SHORT_NAME = 'LithoUnits';

    const NAME_ATTRIBUTE = 'id';
    const PARENT_CLASSNAME = 'ProjectExpedition';
    const ANCESTORS = ['expedition'=>'ProjectExpedition', 'program'=>'ProjectProgram'];
    const DEFAULT_VALUES = [];


    public static function getFormFilters() {
        return [
            "expedition" => ["model" => "ProjectExpedition", "value" => "id", "text" => "exp_acronym", "ref" => "expedition_id"]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'geology_litho_units';
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            [['expedition_id'], 'integer'],
            [['lithological_unit', 'lithological_unit_name', 'combined_id'], 'string', 'max' => 255],
            [['description'], 'string', 'max' => 3000],
            [['expedition_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProjectExpedition::className(), 'targetAttribute' => ['expedition_id' => 'id']],
            [['expedition_id'],'required'],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'expedition_id' => Yii::t('app', 'Expedition'),
            'lithological_unit' => Yii::t('app', 'Lithological Unit'),
            'lithological_unit_name' => Yii::t('app', 'Lithological Unit Name'),
            'description' => Yii::t('app', 'Description'),
            'combined_id' => Yii::t('app', 'System Combined ID'),
        ];
    }



    /**
     * @return \yii\db\ActiveQuery
     */
    public function getExpedition()
    {
        return $this->hasOne(ProjectExpedition::className(), ['id' => 'expedition_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->getExpedition();
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProgram()
    {
        return $this->parent->parent;
    }

    public function fields()
    {
        $fields = [
            'expedition_id' => function($model) { return $model->injectUuid($this->expedition); },
            'program_id' => function($model) { return $model->injectUuid($this->program); },
        ];
        if(\Yii::$app->controller->action->id !== "harvest") {
            $fields["archive_files"] = function ($model) {
                return [
                    'filter' => [
                        'expedition' => $model->expedition->id,
                        'id' => $model->id
                    ]                ];
            };
        }
        return array_merge(parent::fields(), $fields);
    }

    public function load($data, $formName = null)
    {
        if(isset($data['expedition_id']) && is_array($data['expedition_id'])) {
            $data['expedition_id'] = $data['expedition_id']['id'];
        }
        if(isset($data['program_id']) && is_array($data['program_id'])) {
            $data['program_id'] = $data['program_id']['id'];
        }
        return parent::load($data, $formName);
    }




    /**
    * {@inheritdoc}
    */
    public function beforeDelete()
    {
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


}

