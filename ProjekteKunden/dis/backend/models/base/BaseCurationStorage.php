<?php

namespace app\models\base;

use Yii;
use app\models\CurationCorebox;
use app\models\CurationStorage;

/**
 * This is the generated model base class for table "curation_storage".
 * DO NOT EDIT THIS CLASS MANUALLY!
 *
 * @property int $id ID
 * @property string|null $storage Storage
 * @property string|null $combined_id Combined ID
 * @property string|null $type Type
 * @property int|null $parent_id Parent ID
 * @property string|null $exp_acronym Expedition Acronym
 * @property string|null $comment Additional Information
 *
 * @property CurationCorebox[] $curationCoreboxes
 * @property CurationStorage $parent
 * @property CurationStorage[] $curationStorages
 */
abstract class BaseCurationStorage extends \app\models\core\Base
{
    /* [i.e columnName => [displayColumn, relationName],[..]] */
    const MANY_TO_MANY_COLUMNS = [];
    /* [[i.e columnName => displayColumn],[..]] */
    const ONE_TO_MANY_COLUMNS = [];

    const MODULE = 'Curation';
    const SHORT_NAME = 'Storage';

    const NAME_ATTRIBUTE = 'storage';
    const PARENT_CLASSNAME = 'CurationStorage';
    const ANCESTORS = ['storage'=>'CurationStorage'];
    const DEFAULT_VALUES = [];


    public static function getFormFilters() {
        return [
            "parent" => ["model" => "CurationStorage", "value" => "id", "text" => "storage", "ref" => "parent_id"]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'curation_storage';
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            [['parent_id'], 'integer'],
            [['storage'], 'string', 'max' => 100],
            [['combined_id', 'type', 'exp_acronym', 'comment'], 'string', 'max' => 255],
            [['combined_id'], 'unique'],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => CurationStorage::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['storage', 'type'],'required'],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'storage' => Yii::t('app', 'Storage'),
            'combined_id' => Yii::t('app', 'Combined ID'),
            'type' => Yii::t('app', 'Type'),
            'parent_id' => Yii::t('app', 'Parent ID'),
            'exp_acronym' => Yii::t('app', 'Expedition Acronym'),
            'comment' => Yii::t('app', 'Additional Information'),
        ];
    }



    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCurationCoreboxes()
    {
        return $this->hasMany(CurationCorebox::className(), ['storage_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(CurationStorage::className(), ['id' => 'parent_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCurationStorages()
    {
        return $this->hasMany(CurationStorage::className(), ['parent_id' => 'id']);
    }

    public function fields()
    {
        $fields = [
        ];
        return array_merge(parent::fields(), $fields);
    }

    public function load($data, $formName = null)
    {
        return parent::load($data, $formName);
    }




    /**
    * {@inheritdoc}
    */
    public function beforeDelete()
    {
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


}

