<?php

namespace app\models\base;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use \app\models\CurationSampleRequest;

/**
* This is the search base model class for model "CurationSampleRequest".
* DO NOT EDIT THIS FILE.
*/
abstract class BaseCurationSampleRequestSearch extends CurationSampleRequest
{
    use \app\models\core\SearchModelTrait;

    public $program_id;
    public $exp_acronym;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'expedition_id', 'request_no', 'request_part', 'project_phase', 'destructive', 'sample_material', 'split_fraction_requested', 'scientist_1', 'scientist_2', 'scientist_3', 'number_samples', 'sample_size', 'sample_size_unit', 'curator', 'date_submission', 'date_approval', 'date_completion', 'approved_by', 'comment', 'comment_administration', 'exp_acronym', 'hole_combined_id', 'combined_id', 'purpose', 'request_combined_id', 'request_combined_name_id', 'program_id'],'safe'],
        ];
    }

    public function getExtraSortAttributes () {
        return [
            'exp_acronym' => [
                'asc' => ['project_expedition.exp_acronym' => SORT_ASC],
                'desc' => ['project_expedition.exp_acronym' => SORT_DESC],
            ],
        ];
    }

    protected function addQueryColumns($query) {
        $this->addQueryColumn($query, 'id', 'number');
        $this->addQueryColumn($query, 'expedition_id', 'number');
        $this->addQueryColumn($query, 'request_combined_id', 'string');
        $this->addQueryColumn($query, 'request_no', 'number');
        $this->addQueryColumn($query, 'request_part', 'string');
        $this->addQueryColumn($query, 'project_phase', 'string');
        $this->addQueryColumn($query, 'scientist_1', 'string');
        $this->addQueryColumn($query, 'scientist_2', 'string');
        $this->addQueryColumn($query, 'scientist_3', 'string');
        $this->addQueryColumn($query, 'purpose', 'string');
        $this->addQueryColumn($query, 'destructive', 'boolean');
        $this->addQueryColumn($query, 'sample_material', 'string');
        $this->addQueryColumn($query, 'split_fraction_requested', 'number');
        $this->addQueryColumn($query, 'number_samples', 'number');
        $this->addQueryColumn($query, 'sample_size', 'number');
        $this->addQueryColumn($query, 'sample_size_unit', 'string');
        $this->addQueryColumn($query, 'curator', 'string');
        $this->addQueryColumn($query, 'date_submission', 'string');
        $this->addQueryColumn($query, 'date_approval', 'string');
        $this->addQueryColumn($query, 'date_completion', 'string');
        $this->addQueryColumn($query, 'approved_by', 'string');
        $this->addQueryColumn($query, 'comment', 'string');
        $this->addQueryColumn($query, 'comment_administration', 'string');
        $this->addQueryColumn($query, 'hole_combined_id', 'string');
        $this->addQueryColumn($query, 'combined_id', 'string');
        $this->addQueryColumn($query, 'request_combined_name_id', 'string');
        $this->addQueryPseudoColumn($query, 'exp_acronym', 'string', 'project_expedition', 'exp_acronym', array ( 0 =>  array ( 'table' => 'project_expedition', 'on' => 'curation_sample_request.expedition_id = project_expedition.id', ), ));
    }

    protected function addQuerySearchAttributes($query) {
        $joins = [];
        $this->addQuerySearchAttribute($query, 'program_id', 'project_expedition', 'curation_sample_request.expedition_id', 'project_expedition.id', $joins);
        $this->createSearchJoins($query, $joins);
    }

}