<?php

namespace app\models\base;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use \app\models\CurationCuttings;

/**
* This is the search base model class for model "CurationCuttings".
* DO NOT EDIT THIS FILE.
*/
abstract class BaseCurationCuttingsSearch extends CurationCuttings
{
    use \app\models\core\SearchModelTrait;

    public $program_id;
    public $expedition_id;
    public $site_id;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'hole_id', 'cuttings_combined_id', 'igsn', 'curator', 'sampling_datetime', 'top_depth', 'bottom_depth', 'average_depth', 'drillers_sieve', 'comment_drillers', 'sample_weight', 'ratio_rock_clasts', 'max_diameter_rock_clasts', 'sorting', 'comment', 'petrology', 'fossiles', 'comment_fossiles', 'minerals', 'inferred_lithology', 'color_munsell', 'shape_clasts', 'combined_id', 'program_id', 'expedition_id', 'site_id'],'safe'],
        ];
    }

    public function getExtraSortAttributes () {
        return [
        ];
    }

    protected function addQueryColumns($query) {
        $this->addQueryColumn($query, 'id', 'number');
        $this->addQueryColumn($query, 'hole_id', 'number');
        $this->addQueryColumn($query, 'cuttings_combined_id', 'string');
        $this->addQueryColumn($query, 'igsn', 'string');
        $this->addQueryColumn($query, 'curator', 'string');
        $this->addQueryColumn($query, 'sampling_datetime', 'datetime');
        $this->addQueryColumn($query, 'top_depth', 'number');
        $this->addQueryColumn($query, 'bottom_depth', 'number');
        $this->addQueryColumn($query, 'average_depth', 'number');
        $this->addQueryColumn($query, 'drillers_sieve', 'number');
        $this->addQueryColumn($query, 'comment_drillers', 'string');
        $this->addQueryColumn($query, 'sample_weight', 'number');
        $this->addQueryColumn($query, 'ratio_rock_clasts', 'number');
        $this->addQueryColumn($query, 'max_diameter_rock_clasts', 'number');
        $this->addQueryColumn($query, 'sorting', 'string');
        $this->addQueryColumn($query, 'comment', 'string');
        $this->addQueryColumn($query, 'fossiles', 'boolean');
        $this->addQueryColumn($query, 'comment_fossiles', 'string');
        $this->addQueryColumn($query, 'minerals', 'string');
        $this->addQueryColumn($query, 'inferred_lithology', 'string');
        $this->addQueryColumn($query, 'color_munsell', 'string');
        $this->addQueryColumn($query, 'shape_clasts', 'string');
        $this->addQueryColumn($query, 'combined_id', 'string');
        $this->addQueryColumn($query, 'petrology', 'string');
    }

    protected function addQuerySearchAttributes($query) {
        $joins = [];
        $this->addQuerySearchAttribute($query, 'program_id', 'project_expedition', 'project_site.expedition_id', 'project_expedition.id', $joins);
        $this->addQuerySearchAttribute($query, 'expedition_id', 'project_site', 'project_hole.site_id', 'project_site.id', $joins);
        $this->addQuerySearchAttribute($query, 'site_id', 'project_hole', 'curation_cuttings.hole_id', 'project_hole.id', $joins);
        $this->createSearchJoins($query, $joins);
    }

}