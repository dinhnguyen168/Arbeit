<?php
/* @var $this yii\web\View */
/* @var $generator yii\gii\generators\model\Generator */
/* @var $className string class name */
/* @var $tableName string full table name */
/* @var $searchClassName string class name */
/* @var $searchFilters [] */
/* @var $properties [] */
/* @var $pseudoColumnsSearchFilters [] */
/* @var $specializationsSourceCode Additional class properties added by file in directory "specialisationsSourceCode" */
/* @var $manyToManyColumns array of many-To-Many columns */
/* @var $oneToManyColumns array of one-To-Many columns */

    echo "<?php\n";
?>

namespace <?= $generator->baseNs ?>;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use <?= "\\" . $generator->ns . "\\" . $className . ";\n" ?>

/**
* This is the search base model class for model "<?= $className ?>".
* DO NOT EDIT THIS FILE.
*/
abstract class <?= $generator->baseClassPrefix . $searchClassName ?> extends <?= $className . "\n" ?>
{
    use <?= "\\" . $generator->ns . "\\core\\SearchModelTrait;\n" ?>

<?php foreach ($searchFilters as $searchFilter): ?>
    public <?= "$" . $searchFilter->attribute ?>;<?= "\n" ?>
<?php endforeach; ?>
<?php foreach ($pseudoColumnsSearchFilters as $pseudoColumnName => $pseudoColumnsSearchFilter): ?>
    public <?= "$" . $pseudoColumnName ?>;<?= "\n" ?>
<?php endforeach; ?>

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [<?= empty($rules) ? '' : ("\n            " . implode(",\n            ", $rules) . ",\n        ") ?>];
    }

    public function getExtraSortAttributes () {
        return [
<?php foreach ($pseudoColumnsSearchFilters as $pseudoColumnName => $data): ?>
            <?= $generator->generateString($pseudoColumnName) ?> => [
                'asc' => [<?= $generator->generateString($data['targetTable'] . '.' . $data['targetColumn']) ?> => SORT_ASC],
                'desc' => [<?= $generator->generateString($data['targetTable'] . '.' . $data['targetColumn']) ?> => SORT_DESC],
            ],<?= "\n" ?>
<?php endforeach; ?>
<?php foreach($manyToManyColumns as $manyToManyColumn): ?>
            <?= $generator->generateString($manyToManyColumn['attribute']) ?> => [
                'asc' => [<?= $generator->generateString($manyToManyColumn['relatedTable'] . '.' . $manyToManyColumn['displayColumn']) ?> => SORT_ASC],
                'desc' => [<?= $generator->generateString($manyToManyColumn['relatedTable'] . '.' . $manyToManyColumn['displayColumn']) ?> => SORT_DESC],
            ],<?= "\n" ?>
<?php endforeach;?>
<?php foreach($oneToManyColumns as $oneToManyColumn): ?>
            <?= $generator->generateString($oneToManyColumn['attribute']) ?> => [
                'asc' => [<?= $generator->generateString($oneToManyColumn['relatedTable'] . '.' . $oneToManyColumn['displayColumn']) ?> => SORT_ASC],
                'desc' => [<?= $generator->generateString($oneToManyColumn['relatedTable'] . '.' . $oneToManyColumn['displayColumn']) ?> => SORT_DESC],
            ],<?= "\n" ?>
<?php endforeach;?>
        ];
    }

    protected function addQueryColumns($query) {
<?php foreach ($properties as $property => $data): ?>
        $this->addQueryColumn($query, <?= $generator->generateString($property) ?>, '<?= $data['searchType'] ?>');<?= "\n" ?>
<?php endforeach; ?>
<?php foreach ($pseudoColumnsSearchFilters as $pseudoColumnName => $data): ?>
        $this->addQueryPseudoColumn($query, <?= $generator->generateString($pseudoColumnName) ?>, <?= $generator->generateString($data['searchType']) ?>, <?= $generator->generateString($data['targetTable']) ?>, <?= $generator->generateString($data['targetColumn']) ?>, <?= preg_replace("/\\n\s*/", " ", var_export($data['relations'], true)) ?>);<?= "\n" ?>
<?php endforeach; ?>
<?php foreach($manyToManyColumns as $manyToManyColumn): ?>
        $this->addQueryManyToManyColumn($query, '<?=$manyToManyColumn['attribute']?>', '<?= $manyToManyColumn['searchType'] ?>', '<?=$manyToManyColumn['relatedTable']?>', '<?= $manyToManyColumn['displayColumn']?>', '<?= $manyToManyColumn['relationName']?>');
<?php endforeach;?>
<?php foreach($oneToManyColumns as $oneToManyColumn): ?>
        $this->addQueryOneToManyColumn($query, '<?=$oneToManyColumn['attribute']?>', '<?= $oneToManyColumn['searchType'] ?>', '<?=$oneToManyColumn['relatedTable']?>', '<?= $oneToManyColumn['displayColumn']?>', '<?= $oneToManyColumn['relationName']?>');
<?php endforeach;?>
    }

    protected function addQuerySearchAttributes($query) {
        $joins = [];
<?php foreach ($searchFilters as $searchFilter): ?>
        $this->addQuerySearchAttribute($query, <?= $generator->generateString($searchFilter->attribute) ?>, <?= $generator->generateString($searchFilter->table) ?>, <?= $generator->generateString($searchFilter->localColumn) ?>, <?= $generator->generateString($searchFilter->foreignColumn) ?>, $joins);
<?php endforeach; ?>
        $this->createSearchJoins($query, $joins);
    }

<?= $specializationsSourceCode ?>
}